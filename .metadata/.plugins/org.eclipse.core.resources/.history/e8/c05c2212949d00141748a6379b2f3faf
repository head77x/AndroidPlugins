package com.netmego.miguyouxisdk;

import java.util.List;

import android.annotation.SuppressLint;
import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.view.KeyEvent;

import com.anysdk.framework.PluginWrapper;
import com.anysdk.framework.java.AnySDK;
import com.anysdk.framework.java.AnySDKAnalytics;
import com.anysdk.framework.java.AnySDKUser;
import com.netmego.megosdk.AnySDK_Manager;
import com.netmego.megosdk.MegoActivity;
import com.netmego.megosdk.MiguSDKFactory;
import com.netmego.megosdk.MiguSDKFactory.BillingListener;
import com.netmego.megosdk.MiguSDKFactory.ExitGameListener;
import com.unity3d.player.UnityPlayer;
import com.unity3d.player.UnityPlayerActivity;

public class MegoActivity extends UnityPlayerActivity 
{
	private boolean isAppForeground = true;
	
	String _callbackGameObject;
	String _callbackFunc;
	
	boolean PromptExitInGame;
	
	private Handler postHandler = new Handler(); 
	  	
	// #1.  생성시 특별한 조치 없음
	@Override
	protected void onCreate(Bundle savedInstanceState) 
	{
		super.onCreate(savedInstanceState);
	}
	
	@SuppressLint("NewApi") public boolean isAppOnForeground() 
	{
		ActivityManager activityManager = (ActivityManager) getApplicationContext()
				.getSystemService(Context.ACTIVITY_SERVICE);
		
		String packageName = getApplicationContext().getPackageName();
		
		List<RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();
		if (appProcesses == null)
			return false;
		
		for (RunningAppProcessInfo appProcess : appProcesses) 
		{
			if (appProcess.processName.equals(packageName)
					&& appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) 
			{
				return true;
			}
		}
		
		return false;
	}
	 
	@Override
	protected void onStop() 
	{
		super.onStop();
		System.out.println("onStop");
		 
		if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
		{
			AnySDKAnalytics.getInstance().stopSession();
			if(!isAppOnForeground())
			{
				isAppForeground = false;
			}
		}
		
	}
	 
	@Override
	protected void onRestart() 
	{
		// TODO Auto-generated method stub
		super.onRestart();
		System.out.println("onRestart");
	}
	 
	@Override
	protected void onResume() 
	{
		super.onResume();
		System.out.println("onResume");
		if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
		{
			AnySDKAnalytics.getInstance().startSession();
			if(!isAppForeground)
			{
				AnySDKUser.getInstance().callFunction("pause");
				isAppForeground = true;			
			}
		}
	}
	
	@Override
	public void onPause()
	{
		super.onPause();
		System.out.println("onPause");
		
		if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
		{
			AnySDKAnalytics.getInstance().stopSession();
			if(!isAppOnForeground())
			{
				isAppForeground = false;
			}
		}
	}

	// #2. 초기화 함수 - Unity 에서 호출
	public void OnInit(
			final String AnySDK_AppKey, final String AnySDK_AppSecret, final String AnySDK_privateKey, final String AnySDK_oauthLoginServer,
			final String MM_appID, final String MM_appkey, 
			final String uni_AppID, final String uni_CpCode, final String uni_CpID, 
			final String ty_channelID, final String ty_seccode, 
			final String CompanyName, final String QAPhone, 
			final String AppName, final boolean OtherPay )
	{
		System.out.println("Migu SDK init :" + AppName + ":"  + CompanyName);

		postHandler.post( new Runnable()
		{
			public void run()
			{
				MiguSDKFactory.init(
						MegoActivity.this, 
						AnySDK_AppKey, AnySDK_AppSecret, AnySDK_privateKey, AnySDK_oauthLoginServer,
						MM_appID, MM_appkey,
						uni_AppID, uni_CpCode, uni_CpID, ty_channelID, 
						ty_seccode, CompanyName, QAPhone, AppName, OtherPay );
			}
		});
	}
	
	// #3. 결제 신청
	public void OnBuy(
			final String smsPayItem, final String vaccode, final String props, 
			final String money, final String appID, 
			final String callbackGameObject, final String callbackFunc )
	{
		System.out.println("san wang on buy :" + smsPayItem);
		
		_callbackGameObject = callbackGameObject;
		_callbackFunc = callbackFunc;

		postHandler.post( new Runnable()
		{
			public void run()
			{
				BillingListener fff = new BillingListener()
				{
					@Override
					public void onPurchaseSucceed(String item) 
					{
						UnityPlayer.UnitySendMessage(_callbackGameObject, _callbackFunc, "0|0|success" );
					}
					
					@Override
					public void onPurchaseInfo(String msg) 
					{
						UnityPlayer.UnitySendMessage(_callbackGameObject, _callbackFunc, "0|0|" + msg );
					}
					
					@Override
					public void onPurchaseFailed(String item, String msg) 
					{
						UnityPlayer.UnitySendMessage(_callbackGameObject, _callbackFunc, "1|1|" + msg );
					}
					
					@Override
					public void onPurchaseCanceld(String item) 
					{
						UnityPlayer.UnitySendMessage(_callbackGameObject, _callbackFunc, "3|3|canceled" );
					}
				};
					
				MiguSDKFactory.getInstance().pay(MegoActivity.this, smsPayItem, vaccode, props, money, appID, fff, true);
			}
		});
	}

	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data){
		super.onActivityResult(requestCode, resultCode, data);
		
		if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
			PluginWrapper.onActivityResult(requestCode, resultCode, data);
	}
	
	 @Override
	 protected void onDestroy() {
		 super.onDestroy();
			System.out.println("onDestroy");
		 
		if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
		{
	     AnySDKUser.getInstance().callFunction("destroy");
	     AnySDK.getInstance().release();
		}
	 };
	 	
		@Override
		public boolean onKeyDown(int keyCode, KeyEvent event) 
		{
		    if (keyCode == KeyEvent.KEYCODE_BACK) 
		    {
				if ( AnySDK_Manager.getInstance() != null && AnySDK_Manager.getInstance().Initialized )
				{
					if (AnySDKUser.getInstance().isSupportFunction("exit")) 
					{
						AnySDKUser.getInstance().callFunction("exit");
						return true;
					}
				}
		    	
		    	PromptExitInGame = false;
		    	MiguSDKFactory.getInstance().exitGame(MegoActivity.this, new ExitGameListener() 
		    	{
		    		@Override
		    		public void onExitGameConfirmExit() 
		    		{
		    			MegoActivity.this.exit();
		    		}
		
		    		@Override
		    		public void onExitGameCancelExit() 
		    		{
		    		}
		          
		    		@Override
		    		public void onExitGameInGame()
		    		{
		    			PromptExitInGame = true; 
		    		}
		    	});
	    	
		    	if ( PromptExitInGame == true )
		    		return super.onKeyDown(keyCode, event);
	    	
		    	return true;
		    }
		    
		    return super.onKeyDown(keyCode, event);
		}    
	       
	  	public void exit()
	  	{
			postHandler.post( new Runnable()
			{
				public void run()
				{
			    	MiguSDKFactory.getInstance().exitGame(MegoActivity.this, new ExitGameListener() 
			    	{
			    		@Override
			    		public void onExitGameConfirmExit() 
			    		{
			    			MegoActivity.this.exit();// .finish();
			    		}
			
			    		@Override
			    		public void onExitGameCancelExit() 
			    		{
			    		}
			          
			    		@Override
			    		public void onExitGameInGame()
			    		{
			    		}
			    	});
				}
			});
	  	}

	  	public void exitApp()
	  	{
			postHandler.post( new Runnable()
			{
				public void run()
				{
					MiguSDKFactory.getInstance().exitGame(MegoActivity.this, new ExitGameListener() 
					{
			          @Override
			          public void onExitGameConfirmExit() 
			          {
			        	  MegoActivity.this.exit();// .finish();
			          }
			
			          @Override
			          public void onExitGameCancelExit() 
			          {
			          }
			          
			          @Override
			          public void onExitGameInGame()
			          {
			          }
			      });
				}
			});
	  	}
	  	
	    public int CheckMobile()
	    {
	    	return MiguSDKFactory.getInstance().getMobileOperatorType(); 
	    }
	    
	    public void viewMoreGames()
	    {
	    	MiguSDKFactory.getInstance().viewMoreGames(MegoActivity.this);
	    	
	    }
		
	    public boolean isMusicEnabled()
	    {
	    	return MiguSDKFactory.getInstance().isMusicEnabled();
	    }
	
}
